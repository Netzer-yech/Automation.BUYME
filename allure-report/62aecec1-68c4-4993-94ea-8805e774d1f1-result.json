{"name": "test_1_registration", "status": "broken", "statusDetails": {"message": "TypeError: not all arguments converted during string formatting", "trace": "self = <registration_screen_test.Registration object at 0x000002894E7CD610>, locator_type = 'xpath', locator_value = \"//input[@placeholder='שם פרט']\", text = 'netzer'\n\n    def send_text(self, locator_type, locator_value, text):  # send text function billed-in find element function\n        try:\n>           self.driver.find_element(locator_type, value=locator_value).send_keys(text)\n\nbase_page.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8d78d9a85af6a750b3cd82dba2228acb\")>, by = 'xpath', value = \"//input[@placeholder='שם פרט']\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation-buyme-6D6ztCaw-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8d78d9a85af6a750b3cd82dba2228acb\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//input[@placeholder='שם פרט']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation-buyme-6D6ztCaw-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002894C3CCF50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x76ED7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7749B74B+107]\\\\n\\\\tRtlClearBits [0x7749B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@placeholder='שם פרט']\"}\nE         (Session info: chrome=111.0.5563.147)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x003F37D3]\nE       \t(No symbol) [0x00388B81]\nE       \t(No symbol) [0x0028B36D]\nE       \t(No symbol) [0x002BD382]\nE       \t(No symbol) [0x002BD4BB]\nE       \t(No symbol) [0x002F3302]\nE       \t(No symbol) [0x002DB464]\nE       \t(No symbol) [0x002F1215]\nE       \t(No symbol) [0x002DB216]\nE       \t(No symbol) [0x002B0D97]\nE       \t(No symbol) [0x002B253D]\nE       \tGetHandleVerifier [0x0066ABF2+2510930]\nE       \tGetHandleVerifier [0x00698EC1+2700065]\nE       \tGetHandleVerifier [0x0069C86C+2714828]\nE       \tGetHandleVerifier [0x004A3480+645344]\nE       \t(No symbol) [0x00390FD2]\nE       \t(No symbol) [0x00396C68]\nE       \t(No symbol) [0x00396D4B]\nE       \t(No symbol) [0x003A0D6B]\nE       \tBaseThreadInitThunk [0x76ED7D69+25]\nE       \tRtlInitializeExceptionChain [0x7749B74B+107]\nE       \tRtlClearBits [0x7749B6CF+191]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation-buyme-6D6ztCaw-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <main_test.TestBuyMeWebsite testMethod=test_1_registration>\n\n    def test_1_registration(self):\n>       self.registration.test_registration()\n\nmain_test.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nregistration_screen_test.py:27: in test_registration\n    self.send_text(Constants.LOCATOR_XPATH, Constants.FIRST_NAME_TEXT_AREA_VALUE, 'netzer')\nbase_page.py:60: in send_text\n    logger.error(locator_type, locator_value)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1518: in error\n    self._log(ERROR, msg, args, **kwargs)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1634: in _log\n    self.handle(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1644: in handle\n    self.callHandlers(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1706: in callHandlers\n    hdlr.handle(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:978: in handle\n    self.emit(record)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation-buyme-6D6ztCaw-py3.11\\Lib\\site-packages\\_pytest\\logging.py:343: in emit\n    super().emit(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1118: in emit\n    self.handleError(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:1110: in emit\n    msg = self.format(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:953: in format\n    return fmt.format(record)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation-buyme-6D6ztCaw-py3.11\\Lib\\site-packages\\_pytest\\logging.py:114: in format\n    return super().format(record)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:687: in format\n    record.message = record.getMessage()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <LogRecord: root, 40, C:\\Users\\netze\\PycharmProjects\\Automation.BUYME\\base_page.py, 60, \"xpath\">\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n    \n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n>           msg = msg % self.args\nE           TypeError: not all arguments converted during string formatting\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\logging\\__init__.py:377: TypeError"}, "attachments": [{"name": "log", "source": "30faf114-f93f-4149-ad68-394cb2fbf0d0-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "878955c3-fde8-412b-972b-d5f73285d81a-attachment.txt", "type": "text/plain"}], "start": 1681415247836, "stop": 1681415261448, "uuid": "825ede21-67f3-4240-9057-b26d696aa1bc", "historyId": "88f87c2fcf3ea0a714028b417028e241", "testCaseId": "49c79544fa3c9fc71957558a04cf6457", "fullName": "main_test.TestBuyMeWebsite#test_1_registration", "labels": [{"name": "suite", "value": "main_test"}, {"name": "subSuite", "value": "TestBuyMeWebsite"}, {"name": "host", "value": "Netzer"}, {"name": "thread", "value": "37772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main_test"}]}